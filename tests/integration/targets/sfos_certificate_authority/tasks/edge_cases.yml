# Copyright 2024 Sophos Ltd.  All rights reserved.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: CREATE TEMPORARY CA CERTIFICATE FILE FOR ERROR TESTING
  ansible.builtin.copy:
    content: |
      -----BEGIN CERTIFICATE-----
      MIIDyjCCArICCQCiXmMJsU/2EDANBgkqhkiG9w0BAQsFADCBpjELMAkGA1UEBhMC
      VVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBGcmFuY2lzY28x
      GjAYBgNVBAoMEVRlc3QgT3JnYW5pemF0aW9uMRIwEAYDVQQLDAlUZXN0IFVuaXQx
      GTAXBgNVBAMMEHRlc3QuZXhhbXBsZS5jb20xHzAdBgkqhkiG9w0BCQEWEHRlc3RA
      ZXhhbXBsZS5jb20wHhcNMjUxMDAyMTg0ODM2WhcNMjYxMDAyMTg0ODM2WjCBpjEL
      MAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDVNhbiBG
      cmFuY2lzY28xGjAYBgNVBAoMEVRlc3QgT3JnYW5pemF0aW9uMRIwEAYDVQQLDAlU
      ZXN0IFVuaXQxGTAXBgNVBAMMEHRlc3QuZXhhbXBsZS5jb20xHzAdBgkqhkiG9w0B
      CQEWEHRlc3RAZXhhbXBsZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDAHxOBiJaQLvnyANKSgPp8gJOWVSbjvJv2vkAS8TXsy3fl0UgRu8Fz0LM+
      JM+twnZ4eQLCSNePhHY9Qa17rWtIkvFsTV89gYakEi65plZt7zbvLfKW3BCGgEdP
      Uz1/7JZM4l8MGnMKSkwltzux5Nkcz3a1H5QoI5QB+lIsjOBpd5zM1fZcJ/sD9NsK
      T8f0W9RHyAON+56a7tVJBHuBijb8ndzjmUY2DMMrEBOLAb0Bwp1ryd7mYUSK6AHd
      hBeJYuRc+PPTuN/2nZHt+ro/Z5W3zo8k7LaO4tMU/4asVjPiQgSLIwsCUljET1UX
      ebuGVVE3QRq8ej9iCYsBUkGco8BDAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAGRX
      0djitWZh21oinAqpr1ymVp/w6FQfye8P33YbNWg1bxJfHHmnhv1h6EVfAz4ehvYw
      0xrhuD9QEJD7m6ual07VKGPUJYplFDJZpoVql7s3GQ/8CXTmd60YEieVjeZ+kGEx
      bW8+nJbjGBDoeTQIsaw7BIO82pWWn6P3WarUCPWxuaFWhAijBR0n4ysIFOXZWfW6
      4LaPKxIfVcHZOEPgMm/SwIivX5r9sjQIseHN/fWtL5p8/um1TOtWwxBqCRJgDwZh
      uiw/y7GPC5GZoxbwJhFA4G/kPBTiIG/TKdkTxPQY3hQQTc0Z5Lf7+GVjobFHeeIN
      Lx72icSDR6OGLJUbnX4=
      -----END CERTIFICATE-----
    dest: /tmp/test_edge_ca_certificate.pem
  delegate_to: localhost

- name: CREATE INVALID PEM CERTIFICATE FILE FOR TESTING
  ansible.builtin.copy:
    content: |
      -----BEGIN CERTIFICATE-----
      INVALID_BASE64_CONTENT_HERE!!!
      -----END CERTIFICATE-----
    dest: /tmp/invalid_pem_certificate.pem
  delegate_to: localhost

- name: CREATE INVALID CERTIFICATE FILE (NOT PEM OR DER)
  ansible.builtin.copy:
    content: |
      This is just plain text
      Not a certificate at all
      Should fail validation
    dest: /tmp/invalid_certificate.txt
  delegate_to: localhost

- name: CREATE INVALID PRIVATE KEY FILE
  ansible.builtin.copy:
    content: |
      -----BEGIN PRIVATE KEY-----
      INVALID_BASE64_CONTENT_HERE!!!
      -----END PRIVATE KEY-----
    dest: /tmp/invalid_private_key.key
  delegate_to: localhost

- name: TEST INVALID PEM CERTIFICATE FORMAT
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_INVALID_PEM
    format: PEM
    ca_cert_file: /tmp/invalid_pem_certificate.pem
    state: present
  register: invalid_pem_result
  ignore_errors: true

- name: ASSERT INVALID PEM CERTIFICATE ERROR
  ansible.builtin.assert:
    that:
      - invalid_pem_result.failed == true
      - "'Invalid certificate file' in invalid_pem_result.msg"
    fail_msg: "Should fail when certificate file has invalid PEM format"

- name: TEST INVALID CERTIFICATE FILE FORMAT
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_INVALID_FORMAT
    format: PEM
    ca_cert_file: /tmp/invalid_certificate.txt
    state: present
  register: invalid_format_result
  ignore_errors: true

- name: ASSERT INVALID CERTIFICATE FORMAT ERROR
  ansible.builtin.assert:
    that:
      - invalid_format_result.failed == true
      - "'Invalid certificate file' in invalid_format_result.msg"
    fail_msg: "Should fail when certificate file is not a valid certificate"

- name: TEST INVALID PRIVATE KEY FORMAT
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_INVALID_KEY
    format: PEM
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    ca_private_key_file: /tmp/invalid_private_key.key
    state: present
  register: invalid_key_result
  ignore_errors: true

- name: ASSERT INVALID PRIVATE KEY ERROR
  ansible.builtin.assert:
    that:
      - invalid_key_result.failed == true
      - "'Invalid private key file' in invalid_key_result.msg"
    fail_msg: "Should fail when private key file has invalid format"

- name: TEST FORMAT MISMATCH - PEM FILE WITH DER FORMAT SPECIFIED
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_FORMAT_MISMATCH
    format: DER
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    state: present
  register: format_mismatch_result
  ignore_errors: true

- name: ASSERT FORMAT MISMATCH ERROR
  ansible.builtin.assert:
    that:
      - format_mismatch_result.failed == true
      - "'PEM format but DER format was expected' in format_mismatch_result.msg"
    fail_msg: "Should fail when certificate format doesn't match specified format"

- name: TEST MISSING REQUIRED PARAMETER - NO CERTIFICATE FILE
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_NO_CERT
    format: PEM
    state: present
  register: missing_cert_file_result
  ignore_errors: true

- name: ASSERT MISSING CERTIFICATE FILE ERROR
  ansible.builtin.assert:
    that:
      - missing_cert_file_result.failed == true
      - "'state is present but any of the following are missing: ca_cert_file' in missing_cert_file_result.msg"
    fail_msg: "Should fail when ca_cert_file is missing"

- name: TEST INVALID NAME CHARACTERS
  sophos.sophos_firewall.sfos_certificate_authority:
    name: "INVALID*NAME!"
    format: PEM
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    state: present
  register: invalid_name_result
  ignore_errors: true

- name: ASSERT INVALID NAME CHARACTERS ERROR
  ansible.builtin.assert:
    that:
      - invalid_name_result.failed == true
      - "'invalid characters' in invalid_name_result.msg"
    fail_msg: "Should fail when name contains invalid characters"

- name: TEST NAME TOO LONG
  sophos.sophos_firewall.sfos_certificate_authority:
    name: "{{ 'A' * 256 }}"  # 256 characters, exceeds 255 limit
    format: PEM
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    state: present
  register: name_too_long_result
  ignore_errors: true

- name: ASSERT NAME TOO LONG ERROR
  ansible.builtin.assert:
    that:
      - name_too_long_result.failed == true
      - "'must not exceed 255 characters' in name_too_long_result.msg"
    fail_msg: "Should fail when name exceeds 255 characters"

- name: TEST PASSWORD TOO SHORT
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_BAD_PASSWORD
    format: PEM
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    password: "abc"  # Too short (less than 4 characters)
    state: present
  register: password_too_short_result
  ignore_errors: true

- name: ASSERT PASSWORD TOO SHORT ERROR
  ansible.builtin.assert:
    that:
      - password_too_short_result.failed == true
      - "'between 4 and 30 characters' in password_too_short_result.msg"
    fail_msg: "Should fail when password is too short"

- name: TEST PASSWORD TOO LONG
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_BAD_PASSWORD2
    format: PEM
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    password: "{{ 'a' * 31 }}"  # Too long (more than 30 characters)
    state: present
  register: password_too_long_result
  ignore_errors: true

- name: ASSERT PASSWORD TOO LONG ERROR
  ansible.builtin.assert:
    that:
      - password_too_long_result.failed == true
      - "'between 4 and 30 characters' in password_too_long_result.msg"
    fail_msg: "Should fail when password is too long"

- name: TEST MISSING CERTIFICATE FILE PATH
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_MISSING_FILE
    format: PEM
    ca_cert_file: /tmp/nonexistent_certificate.pem
    state: present
  register: missing_file_result
  ignore_errors: true

- name: ASSERT MISSING CERTIFICATE FILE ERROR
  ansible.builtin.assert:
    that:
      - missing_file_result.failed == true
      - "'No such file or directory' in missing_file_result.msg"
    fail_msg: "Should fail when certificate file does not exist"

- name: TEST MISSING PRIVATE KEY FILE PATH
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_MISSING_KEY
    format: PEM
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    ca_private_key_file: /tmp/nonexistent_key.key
    state: present
  register: missing_key_file_result
  ignore_errors: true

- name: ASSERT MISSING PRIVATE KEY FILE ERROR
  ansible.builtin.assert:
    that:
      - missing_key_file_result.failed == true
      - "'No such file or directory' in missing_key_file_result.msg"
    fail_msg: "Should fail when private key file does not exist"

- name: TEST UPDATE WITHOUT CERTIFICATE FILE
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_UPDATE_NO_CERT
    format: PEM
    state: update
  register: update_no_cert_result
  ignore_errors: true

- name: ASSERT UPDATE WITHOUT CERTIFICATE FILE ERROR
  ansible.builtin.assert:
    that:
      - update_no_cert_result.failed == true
      - "'state is update but any of the following are missing: ca_cert_file' in update_no_cert_result.msg"
    fail_msg: "Should fail when updating without certificate file"

- name: TEST VALID NAME WITH ALLOWED SPECIAL CHARACTERS
  sophos.sophos_firewall.sfos_certificate_authority:
    name: Valid_Name-123.Test@CA
    format: PEM
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    state: present
  register: valid_special_name_result

- name: ASSERT VALID SPECIAL CHARACTERS SUCCESS
  ansible.builtin.assert:
    that:
      - valid_special_name_result.changed == true
      - valid_special_name_result.api_response is defined
    fail_msg: "Should succeed with valid special characters in name"

- name: TEST VALID PASSWORD LENGTH BOUNDARIES
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_BOUNDARY_PASSWORD
    format: PEM
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    password: "test"  # Exactly 4 characters (minimum)
    state: present
  register: min_password_result

- name: ASSERT MINIMUM PASSWORD LENGTH SUCCESS
  ansible.builtin.assert:
    that:
      - min_password_result.changed == true
      - min_password_result.api_response is defined
    fail_msg: "Should succeed with minimum password length"

- name: TEST MAXIMUM PASSWORD LENGTH
  sophos.sophos_firewall.sfos_certificate_authority:
    name: TEST_CA_MAX_PASSWORD
    format: PEM
    ca_cert_file: /tmp/test_edge_ca_certificate.pem
    password: "{{ 'a' * 30 }}"  # Exactly 30 characters (maximum)
    state: present
  register: max_password_result

- name: ASSERT MAXIMUM PASSWORD LENGTH SUCCESS
  ansible.builtin.assert:
    that:
      - max_password_result.changed == true
      - max_password_result.api_response is defined
    fail_msg: "Should succeed with maximum password length"

- name: CLEANUP EDGE CASE TEMPORARY FILES
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/test_edge_ca_certificate.pem
    - /tmp/invalid_pem_certificate.pem
    - /tmp/invalid_certificate.txt
    - /tmp/invalid_private_key.key
  delegate_to: localhost