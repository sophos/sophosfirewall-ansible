# Copyright 2023 Sophos Ltd.  All rights reserved.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)


- name: CHECK REQUIRED VARS
  ansible.builtin.fail:
    msg: | 
      Please ensure these variables are set in tests/integration/integration_config.yml: 
      - ansible_user
      - ansible_host
      - ansible_password
      - ansible_connection
      - ansible_httpapi_validate_certs
      - ansible_httpapi_port
      - ansible_network_os
      
  when: ansible_user is not defined or
        ansible_host is not defined or
        ansible_password is not defined or
        ansible_connection is not defined or
        ansible_httpapi_validate_certs is not defined or
        ansible_httpapi_port is not defined or
        ansible_network_os is not defined

- name: CHECK CONNECTION
  ansible.builtin.fail:
    msg: | 
      Please ensure ansible_connection is set to ansible.netcommon.httpapi in tests/integration/integration_config.yml
      
  when: ansible_connection != "ansible.netcommon.httpapi"

- name: CHECK NETWORK_OS
  ansible.builtin.fail:
    msg: | 
      Please ensure ansible_network_os is set to sophos.sophos_firewall.sfos in tests/integration/integration_config.yml
      
  when: ansible_network_os != "sophos.sophos_firewall.sfos"
  
- name: ENSURE TEST RULES DO NOT EXIST
  sophos.sophos_firewall.sfos_firewall_rule:
    name: "{{ item }}"
    state: absent
  loop:
    - IGT_TESTRULE
    - IGT_TESTRULE_ANY
    - IGT_TESTRULE_WEBFILTER
    - IGT_TESTRULE_QOS

- name: CREATE NETWORKS
  sophos.sophos_firewall.sfos_ip_host:
    name: "{{ item.name }}"
    network: "{{ item.ip_address }}"
    mask: "{{ item.mask }}"
    host_type: network
    state: present   
  loop:
    - name: IGT_TESTNETWORK1
      ip_address: 1.1.1.0
      mask: 255.255.255.0
    - name: IGT_TESTNETWORK2
      ip_address: 2.2.2.0
      mask: 255.255.255.0
    - name: IGT_TESTNETWORK3
      ip_address: 3.3.3.0
      mask: 255.255.255.0

- name: CREATE WEB FILTER POLICY
  sfos_web_policy:
    name: "IGT_TEST_POLICY"
    default_action: "Allow"
    description: "Basic test policy created by Ansible integration testing"
    state: present

- name: CREATE QOS POLICY
  sophos.sophos_firewall.sfos_qos_policy:
    name: IGT_TEST_QOS_POLICY
    policy_type: "Strict"
    implementation_on: "Total"
    priority: "BusinessCritical"
    policy_based_on: "Firewall"
    bandwidth_usage_type: "Shared"
    total_bandwidth: 1000
    description: "Test policy for integration testing"
    state: present

- name: CREATE FIREWALL RULE
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE
    position: bottom
    status: enable
    src_networks:
      - IGT_TESTNETWORK1
    dst_networks:
      - IGT_TESTNETWORK2
    service_list:
      - HTTPS
    action: accept
    state: present
  register: create_rule

- name: ASSERTION CHECK FOR CREATE FIREWALL RULE
  assert:
    that: 
      - create_rule is changed
      - create_rule['api_response']['Response']['FirewallRule']['Status']['@code'] == "200"
      - create_rule['api_response']['Response']['FirewallRule']['Status']['#text'] == "Configuration applied successfully."

- name: QUERY FIREWALL RULE
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE
    state: query
  register: query_rule

- name: ASSERTION CHECK FOR QUERY FIREWALL RULE
  assert:
    that: 
      - query_rule is not changed
      - query_rule['api_response']['Response']['FirewallRule']['Name'] == "IGT_TESTRULE"
      - query_rule['api_response']['Response']['FirewallRule']['Status'] == "Enable"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['Action'] == "Accept"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['SourceNetworks']['Network'] == "IGT_TESTNETWORK1"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['DestinationNetworks']['Network'] == "IGT_TESTNETWORK2"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['Services']['Service'] == "HTTPS"

- name: CREATE FIREWALL RULE USING ANY
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE_ANY
    position: bottom
    status: enable
    src_networks:
      - Any
    dst_networks:
      - Any
    service_list:
      - Any
    action: accept
    state: present
  register: create_any

- name: ASSERTION CHECK FOR CREATE FIREWALL RULE USING ANY
  assert:
    that: 
      - create_any is changed
      - create_any['api_response']['Response']['FirewallRule']['Status']['@code'] == "200"
      - create_any['api_response']['Response']['FirewallRule']['Status']['#text'] == "Configuration applied successfully."

- name: QUERY FIREWALL RULE USING ANY
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE_ANY
    state: query
  register: query_rule_any

- name: ASSERTION CHECK FOR QUERY FIREWALL RULE USING ANY
  assert:
    that: 
      - query_rule_any is not changed
      - query_rule_any['api_response']['Response']['FirewallRule']['Name'] == "IGT_TESTRULE_ANY"
      - query_rule_any['api_response']['Response']['FirewallRule']['Status'] == "Enable"
      - query_rule_any['api_response']['Response']['FirewallRule']['NetworkPolicy']['Action'] == "Accept"
      - "'SourceNetworks' not in query_rule_any['api_response']['Response']['FirewallRule']['NetworkPolicy']"
      - "'DestinationNetworks' not in query_rule_any['api_response']['Response']['FirewallRule']['NetworkPolicy']"
      - "'Services' not in query_rule_any['api_response']['Response']['FirewallRule']['NetworkPolicy']"

- name: CREATE FIREWALL RULE WITH WEB FILTER
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE_WEBFILTER
    position: bottom
    status: enable
    src_networks:
      - IGT_TESTNETWORK1
    dst_networks:
      - IGT_TESTNETWORK2
    service_list:
      - HTTPS
    web_filter: IGT_TEST_POLICY
    action: accept
    state: present
  register: create_rule

- name: ASSERTION CHECK FOR CREATE FIREWALL RULE WITH WEB FILTER
  assert:
    that: 
      - create_rule is changed
      - create_rule['api_response']['Response']['FirewallRule']['Status']['@code'] == "200"
      - create_rule['api_response']['Response']['FirewallRule']['Status']['#text'] == "Configuration applied successfully."

- name: QUERY FIREWALL RULE WITH WEB FILTER
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE_WEBFILTER
    state: query
  register: query_rule

- name: ASSERTION CHECK FOR QUERY FIREWALL RULE WITH WEB FILTER
  assert:
    that: 
      - query_rule is not changed
      - query_rule['api_response']['Response']['FirewallRule']['Name'] == "IGT_TESTRULE_WEBFILTER"
      - query_rule['api_response']['Response']['FirewallRule']['Status'] == "Enable"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['Action'] == "Accept"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['SourceNetworks']['Network'] == "IGT_TESTNETWORK1"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['DestinationNetworks']['Network'] == "IGT_TESTNETWORK2"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['Services']['Service'] == "HTTPS"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['WebFilter'] == "IGT_TEST_POLICY"

- name: CREATE FIREWALL RULE WITH QOS POLICY
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE_QOS
    position: bottom
    status: enable
    src_networks:
      - IGT_TESTNETWORK1
    dst_networks:
      - IGT_TESTNETWORK2
    service_list:
      - HTTPS
    qos_policy: IGT_TEST_QOS_POLICY
    action: accept
    state: present
  register: create_rule

- name: ASSERTION CHECK FOR CREATE FIREWALL RULE WITH QOS POLICY
  assert:
    that: 
      - create_rule is changed
      - create_rule['api_response']['Response']['FirewallRule']['Status']['@code'] == "200"
      - create_rule['api_response']['Response']['FirewallRule']['Status']['#text'] == "Configuration applied successfully."

- name: QUERY FIREWALL RULE WITH QOS POLICY
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE_QOS
    state: query
  register: query_rule

- name: ASSERTION CHECK FOR QUERY FIREWALL RULE WITH QOS POLICY
  assert:
    that: 
      - query_rule is not changed
      - query_rule['api_response']['Response']['FirewallRule']['Name'] == "IGT_TESTRULE_QOS"
      - query_rule['api_response']['Response']['FirewallRule']['Status'] == "Enable"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['Action'] == "Accept"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['SourceNetworks']['Network'] == "IGT_TESTNETWORK1"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['DestinationNetworks']['Network'] == "IGT_TESTNETWORK2"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['Services']['Service'] == "HTTPS"
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['TrafficShappingPolicy'] == "IGT_TEST_QOS_POLICY"



- name: CREATE EXISTING FIREWALL RULE
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE
    position: bottom
    status: enable
    src_networks:
      - IGT_TESTNETWORK1
    dst_networks:
      - IGT_TESTNETWORK2
    service_list:
      - HTTPS
    action: accept
    state: present
  register: create_existing

- name: ASSERTION CHECK FOR CREATE EXISTING FIREWALL RULE 
  assert:
    that: 
      - create_existing is not changed
      - create_existing['api_response']['Response']['FirewallRule']['Name'] == "IGT_TESTRULE"

- name: UPDATE FIREWALL RULE
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE
    dst_networks:
      - IGT_TESTNETWORK2
      - IGT_TESTNETWORK3
    state: updated
  register: update_rule

- name: ASSERTION CHECK FOR UPDATE FIREWALL RULE
  assert:
    that: 
      - update_rule is changed
      - update_rule['api_response']['Response']['FirewallRule']['Status']['@code'] == "200"
      - update_rule['api_response']['Response']['FirewallRule']['Status']['#text'] == "Configuration applied successfully."

- name: QUERY FIREWALL RULE
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE
    state: query
  register: query_rule

- name: ASSERTION CHECK FOR UPDATED FIREWALL RULE
  assert:
    that: 
      - query_rule is not changed
      - query_rule['api_response']['Response']['FirewallRule']['Status'] == 'Enable'
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['Action'] == 'Accept'
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['SourceNetworks']['Network'] == 'IGT_TESTNETWORK1'
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['DestinationNetworks']['Network'] == ['IGT_TESTNETWORK2', 'IGT_TESTNETWORK3']
      - query_rule['api_response']['Response']['FirewallRule']['NetworkPolicy']['Services']['Service'] == "HTTPS"

- name: REMOVE IGT_TESTRULE
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE
    state: absent
  register: remove_rule

- name: ASSERTION CHECK FOR REMOVE IGT_TESTRULE
  assert:
    that: 
      - remove_rule is changed
      - remove_rule['api_response']['Response']['FirewallRule']['Status']['@code'] == "200"
      - remove_rule['api_response']['Response']['FirewallRule']['Status']['#text'] == "Configuration applied successfully."

- name: REMOVE NONEXISTING RULE
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE
    state: absent
  register: remove_nonexist

- name: ASSERTION CHECK FOR REMOVE NONEXISTING RULE
  assert:
    that: 
      - remove_nonexist is not changed
      - remove_nonexist['api_response'] == "No. of records Zero."

- name: UPDATE NONEXISTING RULE
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE
    dst_networks:
      - IGT_TESTNETWORK2
    state: updated
  register: update_nonexist
  ignore_errors: true

- name: ASSERTION CHECK FOR UPDATE NONEXISTING RULE
  assert:
    that: 
      - update_nonexist is failed
      - update_nonexist['api_response'] == "No. of records Zero."

- name: REMOVE IGT_TESTRULE_ANY
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE_ANY
    state: absent
  register: remove_rule

- name: REMOVE IGT_TESTRULE_WEBFILTER
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE_WEBFILTER
    state: absent

- name: REMOVE IGT_TESTRULE_QOS
  sophos.sophos_firewall.sfos_firewall_rule:
    name: IGT_TESTRULE_QOS
    state: absent

- name: REMOVE TEST NETWORKS
  sophos.sophos_firewall.sfos_ip_host:
    name: "{{ item.name }}"
    network: "{{ item.ip_address }}"
    mask: "{{ item.mask }}"
    state: absent
    host_type: network
  loop:
    - name: IGT_TESTNETWORK1
      ip_address: 1.1.1.0
      mask: 255.255.255.0
    - name: IGT_TESTNETWORK2
      ip_address: 2.2.2.0
      mask: 255.255.255.0
    - name: IGT_TESTNETWORK3
      ip_address: 3.3.3.0
      mask: 255.255.255.0

- name: REMOVE WEB FILTER POLICY
  sophos.sophos_firewall.sfos_web_policy:
    name: IGT_TEST_POLICY
    state: absent

- name: REMOVE QOS POLICY
  sophos.sophos_firewall.sfos_qos_policy:
    name: IGT_TEST_QOS_POLICY
    state: absent