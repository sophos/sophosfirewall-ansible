---
# Test QoS Policy Creation
- name: Pre-test cleanup - Remove test QoS policies
  sophos.sophos_firewall.sfos_qos_policy:
    name: "{{ item }}"
    state: absent
  loop:
    - "Test QoS Strict Total"
    - "Test QoS Committed Individual" 
    - "Test QoS Business Critical"
  ignore_errors: true

- name: Create QoS Policy - Strict Total type
  sophos.sophos_firewall.sfos_qos_policy:
    name: "Test QoS Strict Total"
    policy_type: "Strict"
    implementation_on: "Total"
    priority: "BusinessCritical"
    policy_based_on: "User"
    bandwidth_usage_type: "Shared"
    total_bandwidth: 1000
    description: "Test strict policy with total bandwidth control"
    state: present
  register: result

- name: Assert QoS Policy created successfully
  assert:
    that:
      - result.changed == true
      - result.api_response.Response.QoSPolicy.Status['@code'] in ['200', '217'] or "successfully" in result.api_response.Response.QoSPolicy.Status['#text']
    fail_msg: "QoS Policy creation failed"
    success_msg: "QoS Policy created successfully"

- name: Create QoS Policy - Committed Individual type
  sophos.sophos_firewall.sfos_qos_policy:
    name: "Test QoS Committed Individual"
    policy_type: "Committed"
    implementation_on: "Individual"
    priority: "Normal2"
    policy_based_on: "Application"
    bandwidth_usage_type: "Individual"
    guaranteed_upload_bandwidth: 500
    burstable_upload_bandwidth: 1000
    guaranteed_download_bandwidth: 1000
    burstable_download_bandwidth: 2000
    description: "Test committed policy with individual bandwidth limits"
    state: present
  register: result

- name: Assert QoS Policy created successfully
  assert:
    that:
      - result.changed == true
      - result.api_response.Response.QoSPolicy.Status['@code'] in ['200', '217'] or "successfully" in result.api_response.Response.QoSPolicy.Status['#text']
    fail_msg: "Committed QoS Policy creation failed"
    success_msg: "Committed QoS Policy created successfully"

- name: Create QoS Policy - RealTime priority
  sophos.sophos_firewall.sfos_qos_policy:
    name: "Test QoS Business Critical"
    policy_type: "Strict"
    implementation_on: "Individual"
    priority: "RealTime"
    policy_based_on: "Firewall"
    bandwidth_usage_type: "Individual"
    upload_bandwidth: 2000
    download_bandwidth: 4000
    description: "Test policy with RealTime priority"
    state: present
  register: result

- name: Assert RealTime QoS Policy created successfully
  assert:
    that:
      - result.changed == true
      - result.api_response.Response.QoSPolicy.Status['@code'] in ['200', '217'] or "successfully" in result.api_response.Response.QoSPolicy.Status['#text']
    fail_msg: "RealTime QoS Policy creation failed"
    success_msg: "RealTime QoS Policy created successfully"

- name: Attempt to create duplicate QoS Policy
  sophos.sophos_firewall.sfos_qos_policy:
    name: "Test QoS Strict Total"
    policy_type: "Strict"
    implementation_on: "Total"
    priority: "BusinessCritical"
    total_bandwidth: 2000
    state: present
  register: result

- name: Assert duplicate QoS Policy not changed
  assert:
    that:
      - result.changed == false
    fail_msg: "Duplicate QoS Policy should not be changed"
    success_msg: "Duplicate QoS Policy correctly not changed"
